
<html>
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>Questa Coverage Report</title>
  <link rel="StyleSheet" media="screen" href="../css/hdl2html.css"/>
</head>
<body id="hdl2html">
  <tt>
<pre>
<a name="1"><q-n>     1  </q-n></a><q-w>interface</q-w> alu_intfc(<q-w>input</q-w> <q-w>logic</q-w> clk_i,rst_i);
<a name="2"><q-n>     2  </q-n></a>	<q-w>logic</q-w> valid_i;
<a name="3"><q-n>     3  </q-n></a>	<q-w>logic</q-w> [31:0]operand_a;
<a name="4"><q-n>     4  </q-n></a>	<q-w>logic</q-w> [31:0]operand_b;
<a name="5"><q-n>     5  </q-n></a>	<q-w>logic</q-w> [2:0]operation;
<a name="6"><q-n>     6  </q-n></a>	<q-w>logic</q-w> ready_o;
<a name="7"><q-n>     7  </q-n></a>	<q-w>logic</q-w> [31:0]result;
<a name="8"><q-n>     8  </q-n></a>
<a name="9"><q-n>     9  </q-n></a>	<q-m>// Clocking blocks</q-m>
<a name="10"><q-n>     10  </q-n></a>	<q-w>clocking</q-w> drv_cb@(<q-a>posedge</q-w> clk_i);
<a name="11"><q-n>     11  </q-n></a>		<q-w>default</q-w> <q-w>input</q-w> #0 <q-w>output</q-w> #1;
<a name="12"><q-n>     12  </q-n></a>		<q-w>input</q-w> ready_o;
<a name="13"><q-n>     13  </q-n></a>		<q-w>input</q-w> result;
<a name="14"><q-n>     14  </q-n></a>		<q-w>output</q-w> valid_i;
<a name="15"><q-n>     15  </q-n></a>		<q-w>output</q-w> operand_a;
<a name="16"><q-n>     16  </q-n></a>		<q-w>output</q-w> operand_b;
<a name="17"><q-n>     17  </q-n></a>		<q-w>output</q-w> operation;
<a name="18"><q-n>     18  </q-n></a>	<q-w>endclocking</q-w>
<a name="19"><q-n>     19  </q-n></a>
<a name="20"><q-n>     20  </q-n></a>	<q-w>clocking</q-w> mon_cb@(<q-a>posedge</q-w> clk_i);
<a name="21"><q-n>     21  </q-n></a>		<q-w>default</q-w> <q-w>input</q-w> #1;
<a name="22"><q-n>     22  </q-n></a>		<q-w>input</q-w> ready_o;
<a name="23"><q-n>     23  </q-n></a>		<q-w>input</q-w> result;
<a name="24"><q-n>     24  </q-n></a>		<q-w>input</q-w> valid_i;
<a name="25"><q-n>     25  </q-n></a>		<q-w>input</q-w> operand_a;
<a name="26"><q-n>     26  </q-n></a>		<q-w>input</q-w> operand_b;
<a name="27"><q-n>     27  </q-n></a>		<q-w>input</q-w> operation;
<a name="28"><q-n>     28  </q-n></a>	<q-w>endclocking</q-w>
<a name="29"><q-n>     29  </q-n></a>
<a name="30"><q-n>     30  </q-n></a>	<q-m>// Assertions</q-m>
<a name="31"><q-n>     31  </q-n></a>	<q-w>property</q-w> handshake;
<a name="32"><q-n>     32  </q-n></a>		@(<q-a>posedge</q-w> clk_i) valid_i ==1 |=&gt; ready_o==1;
<a name="33"><q-n>     33  </q-n></a>	<q-w>endproperty</q-w>
<a name="34"><q-n>     34  </q-n></a>	<q-w>property</q-w> add_operation;
<a name="35"><q-n>     35  </q-n></a>		@(<q-a>posedge</q-w> clk_i) (operation==0) |=&gt; (result== operand_a+operand_b);
<a name="36"><q-n>     36  </q-n></a>	<q-w>endproperty</q-w>
<a name="37"><q-n>     37  </q-n></a>
<a name="38"><q-n>     38  </q-n></a>	<q-w>property</q-w> sub_operation(operand_a,operand_b,operation);
<a name="39"><q-n>     39  </q-n></a>		@(<q-a>posedge</q-w> clk_i) (operation==1) |=&gt; (result== operand_a-operand_b);
<a name="40"><q-n>     40  </q-n></a>	<q-w>endproperty</q-w>
<a name="41"><q-n>     41  </q-n></a>	<q-w>property</q-w> mul_operation(operand_a,operand_b,operation);
<a name="42"><q-n>     42  </q-n></a>		@(<q-a>posedge</q-w> clk_i) (operation==2) |=&gt; (result== operand_a*operand_b);
<a name="43"><q-n>     43  </q-n></a>	<q-w>endproperty</q-w>
<a name="44"><q-n>     44  </q-n></a>	<q-w>property</q-w> div_operation(operand_a,operand_b,operation);
<a name="45"><q-n>     45  </q-n></a>		@(<q-a>posedge</q-w> clk_i) (operation==3) |=&gt; (result== operand_a/operand_b);
<a name="46"><q-n>     46  </q-n></a>	<q-w>endproperty</q-w>
<a name="47"><q-n>     47  </q-n></a>	<q-w>property</q-w> rem_operation(operand_a,operand_b,operation);
<a name="48"><q-n>     48  </q-n></a>		@(<q-a>posedge</q-w> clk_i) (operation==4) |=&gt; (result== operand_a%operand_b);
<a name="49"><q-n>     49  </q-n></a>	<q-w>endproperty</q-w>
<a name="50"><q-n>     50  </q-n></a>	<q-w>property</q-w> and_operation(operand_a,operand_b,operation);
<a name="51"><q-n>     51  </q-n></a>		@(<q-a>posedge</q-w> clk_i) (operation==5) |=&gt; (result== operand_a&amp;operand_b);
<a name="52"><q-n>     52  </q-n></a>	<q-w>endproperty</q-w>
<a name="53"><q-n>     53  </q-n></a>	<q-w>property</q-w> or_operation(operand_a,operand_b,operation);
<a name="54"><q-n>     54  </q-n></a>		@(<q-a>posedge</q-w> clk_i) (operation==6) |=&gt; (result== operand_a|operand_b);
<a name="55"><q-n>     55  </q-n></a>	<q-w>endproperty</q-w>
<a name="56"><q-n>     56  </q-n></a>	<q-w>property</q-w> xor_operation(operand_a,operand_b,operation);
<a name="57"><q-n>     57  </q-n></a>		@(<q-a>posedge</q-w> clk_i) (operation==7) |=&gt; (result== operand_a^operand_b);
<a name="58"><q-n>     58  </q-n></a>	<q-w>endproperty</q-w>
<a name="59"><q-n>     59  </q-n></a>
<a name="60"><q-n>     60  </q-n></a>	HANDSHAKE:<q-w>assert</q-w> <q-w>property</q-w>(handshake);
<a name="61"><q-n>     61  </q-n></a>	ADD_OPE:<q-w>assert</q-w> <q-w>property</q-w>(add_operation);
<a name="62"><q-n>     62  </q-n></a>	SUB_OPE:<q-w>assert</q-w> <q-w>property</q-w>(sub_operation(operand_a,operand_b,operation));
<a name="63"><q-n>     63  </q-n></a>	MUL_OPE:<q-w>assert</q-w> <q-w>property</q-w>(mul_operation(operand_a,operand_b,operation));
<a name="64"><q-n>     64  </q-n></a>	DIV_OPE:<q-w>assert</q-w> <q-w>property</q-w>(div_operation(operand_a,operand_b,operation));
<a name="65"><q-n>     65  </q-n></a>	REM_OPE:<q-w>assert</q-w> <q-w>property</q-w>(rem_operation(operand_a,operand_b,operation));
<a name="66"><q-n>     66  </q-n></a>	AND_OPE:<q-w>assert</q-w> <q-w>property</q-w>(and_operation(operand_a,operand_b,operation));
<a name="67"><q-n>     67  </q-n></a>	OR_OPE:<q-w>assert</q-w> <q-w>property</q-w>(or_operation(operand_a,operand_b,operation));
<a name="68"><q-n>     68  </q-n></a>	XOR_OPE:<q-w>assert</q-w> <q-w>property</q-w>(xor_operation(operand_a,operand_b,operation));
<a name="69"><q-n>     69  </q-n></a><q-w>endinterface</q-w>
</pre>
</tt>

  
</body>
</html>
