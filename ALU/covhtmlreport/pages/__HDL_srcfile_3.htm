
<html>
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>Questa Coverage Report</title>
  <link rel="StyleSheet" media="screen" href="../css/hdl2html.css"/>
</head>
<body id="hdl2html">
  <tt>
<pre>
<a name="1"><q-n>     1  </q-n></a><q-m>// ALU RTL File</q-m>
<a name="2"><q-n>     2  </q-n></a><q-m>// Lets do arithmetic operations such as ADDITION, SUBTRACTION, MULTIPLY, AND, OR, XOR etc</q-m>
<a name="3"><q-n>     3  </q-n></a><q-m>// </q-m>
<a name="4"><q-n>     4  </q-n></a><q-w>module</q-w> alu_design(clk_i,rst_i,valid_i,ready_o,operand_a,operand_b,operation,result);
<a name="5"><q-n>     5  </q-n></a>
<a name="6"><q-n>     6  </q-n></a>	<q-w>input</q-w> clk_i,rst_i,valid_i;
<a name="7"><q-n>     7  </q-n></a>	<q-w>input</q-w> [31:0]operand_a,operand_b;
<a name="8"><q-n>     8  </q-n></a>	<q-w>input</q-w> [2:0]operation;
<a name="9"><q-n>     9  </q-n></a>	<q-w>output</q-w> <q-w>reg</q-w> ready_o;
<a name="10"><q-n>     10  </q-n></a>	<q-w>output</q-w> <q-w>reg</q-w> [31:0]result;
<a name="11"><q-n>     11  </q-n></a>
<a name="12"><q-n>     12  </q-n></a>	<q-m>//function reg [31:0]result(input reg[31:0]operand_a,operand_b, input reg [2:0]operation);</q-m>
<a name="13"><q-n>     13  </q-n></a>	<q-w>always</q-w>@(<q-a>posedge</q-w> clk_i) <q-w>begin</q-w>
<a name="14"><q-n>     14  </q-n></a>		<q-w>if</q-w>(rst_i==1)<q-w>begin</q-w>
<a name="15"><q-n>     15  </q-n></a>			ready_o=0;
<a name="16"><q-n>     16  </q-n></a>			result=0;
<a name="17"><q-n>     17  </q-n></a>		<q-w>end</q-w>
<a name="18"><q-n>     18  </q-n></a>		<q-w>else</q-w> <q-w>begin</q-w>
<a name="19"><q-n>     19  </q-n></a>			<q-w>if</q-w>(valid_i==1)<q-w>begin</q-w>
<a name="20"><q-n>     20  </q-n></a>				ready_o=1;
<a name="21"><q-n>     21  </q-n></a>				<q-w>case</q-w>(operation)
<a name="22"><q-n>     22  </q-n></a>					3'b000: result = operand_a + operand_b; <q-m>//ADDITION</q-m>
<a name="23"><q-n>     23  </q-n></a>					3'b001: result = operand_a - operand_b; <q-m>//SUBTRACTION</q-m>
<a name="24"><q-n>     24  </q-n></a>					3'b010: result = operand_a * operand_b; <q-m>//MULTIPLICATION</q-m>
<a name="25"><q-n>     25  </q-n></a>					3'b011: result = operand_a / operand_b; <q-m>//DIVISION</q-m>
<a name="26"><q-n>     26  </q-n></a>					3'b100: result = operand_a % operand_b; <q-m>//REMAINDER</q-m>
<a name="27"><q-n>     27  </q-n></a>					3'b101: result = operand_a &amp; operand_b; <q-m>//AND</q-m>
<a name="28"><q-n>     28  </q-n></a>					3'b110: result = operand_a | operand_b; <q-m>//OR</q-m>
<a name="29"><q-n>     29  </q-n></a>					3'b111: result = operand_a ^ operand_b; <q-m>//XOR</q-m>
<a name="30"><q-n>     30  </q-n></a>				<q-w>endcase</q-w>
<a name="31"><q-n>     31  </q-n></a>			<q-w>end</q-w>
<a name="32"><q-n>     32  </q-n></a>			<q-w>else</q-w> ready_o=0;
<a name="33"><q-n>     33  </q-n></a>		<q-w>end</q-w>
<a name="34"><q-n>     34  </q-n></a>	<q-w>end</q-w>
<a name="35"><q-n>     35  </q-n></a><q-w>endmodule</q-w>
</pre>
</tt>

  
</body>
</html>
